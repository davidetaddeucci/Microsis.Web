@page "/login"
@using Microsis.Web.Reserved.Services
@using Microsis.Web.Reserved.Shared
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<PageTitle>Login - Microsis Amministrazione</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <img src="images/logo.png" alt="Microsis" class="login-logo" />
            <h2>Area Amministrativa</h2>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="form-group mb-3">
                <label for="email">Email</label>
                <SfTextBox ID="email" Placeholder="Inserisci email" @bind-Value="loginModel.Email"></SfTextBox>
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group mb-4">
                <label for="password">Password</label>
                <SfTextBox ID="password" Type="InputType.Password" Placeholder="Inserisci password" @bind-Value="loginModel.Password"></SfTextBox>
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <div class="text-center">
                <SfButton IsPrimary="true" CssClass="w-100" Type="ButtonType.Submit" Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Elaborazione in corso...</span>
                    }
                    else
                    {
                        <span>Accedi</span>
                    }
                </SfButton>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
    }

    .login-card {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .login-logo {
        max-width: 150px;
        margin-bottom: 1rem;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.Login(loginModel.Email, loginModel.Password);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Credenziali non valide. Riprova.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Errore durante il login. Riprova più tardi.";
            Console.WriteLine($"Errore di login: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "L'email è obbligatoria")]
        [EmailAddress(ErrorMessage = "Formato email non valido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La password è obbligatoria")]
        [MinLength(6, ErrorMessage = "La password deve essere di almeno 6 caratteri")]
        public string Password { get; set; } = string.Empty;
    }
}
