@page "/progetti/add"
@page "/progetti/edit/{Id:guid}"
@using Microsis.Names.Models
@using Microsis.Web.Reserved.Services
@using Microsis.Web.Reserved.Shared
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using System.Text.RegularExpressions
@inject IProgettoUEService ProgettoService
@inject IFotoService FotoService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>@pageTitle - Microsis Amministrazione</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@pageTitle</h1>
        <SfButton OnClick="@(() => NavigationManager.NavigateTo("/progetti"))">
            <i class="fa fa-arrow-left mr-1"></i> Torna alla lista
        </SfButton>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Dettagli Progetto</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@progetto" OnValidSubmit="SaveProgetto">
                        <DataAnnotationsValidator />
                        <div class="form-group mb-3">
                            <label for="titolo">Titolo <span class="text-danger">*</span></label>
                            <SfTextBox ID="titolo" Placeholder="Inserisci titolo" @bind-Value="progetto.Titolo"></SfTextBox>
                            <ValidationMessage For="@(() => progetto.Titolo)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="tabName">Nome Tab <span class="text-danger">*</span></label>
                            <SfTextBox ID="tabName" Placeholder="Inserisci nome tab" @bind-Value="progetto.Tab_Name"></SfTextBox>
                            <ValidationMessage For="@(() => progetto.Tab_Name)" />
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="dataInizio">Data Inizio <span class="text-danger">*</span></label>
                                    <SfDatePicker ID="dataInizio" TValue="DateTime" Placeholder="Seleziona data" @bind-Value="progetto.DataInizio" Format="dd/MM/yyyy"></SfDatePicker>
                                    <ValidationMessage For="@(() => progetto.DataInizio)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="dataFine">Data Fine <span class="text-danger">*</span></label>
                                    <SfDatePicker ID="dataFine" TValue="DateTime" Placeholder="Seleziona data" @bind-Value="progetto.DataFine" Format="dd/MM/yyyy"></SfDatePicker>
                                    <ValidationMessage For="@(() => progetto.DataFine)" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="budget">Budget</label>
                            <SfNumericTextBox ID="budget" TValue="decimal?" @bind-Value="progetto.Budget" Format="C2" Placeholder="Inserisci budget" Min="0"></SfNumericTextBox>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="sponsor">Sponsor</label>
                            <SfTextBox ID="sponsor" Placeholder="Inserisci sponsor" @bind-Value="progetto.Sponsor"></SfTextBox>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label>Enti Coinvolti</label>
                            <div class="enti-container mb-2">
                                @foreach (var ente in progetto.EntiCoinvolti)
                                {
                                    <div class="ente-item">
                                        <span>@ente</span>
                                        <button type="button" class="btn-remove" @onclick="() => RemoveEnte(ente)">
                                            <i class="fa fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="input-group">
                                <SfTextBox Placeholder="Aggiungi un ente coinvolto" @bind-Value="newEnte"></SfTextBox>
                                <div class="input-group-append">
                                    <SfButton OnClick="AddEnte" CssClass="e-primary">Aggiungi</SfButton>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="descrizione">Descrizione <span class="text-danger">*</span></label>
                            <SfRichTextEditor ID="descrizione" @bind-Value="progetto.Descrizione" Height="300px">
                                <RichTextEditorToolbarSettings Items="@tools"></RichTextEditorToolbarSettings>
                            </SfRichTextEditor>
                            <ValidationMessage For="@(() => progetto.Descrizione)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <div class="form-check">
                                <SfCheckBox @bind-Checked="progetto.IsAttivo" Label="Progetto attivo"></SfCheckBox>
                            </div>
                        </div>
                        
                        <div class="form-buttons mt-4">
                            <SfButton Type="ButtonType.Submit" IsPrimary="true" Disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1" role="status" aria-hidden="true"></span>
                                    <span>Salvataggio in corso...</span>
                                }
                                else
                                {
                                    <span>Salva</span>
                                }
                            </SfButton>
                            <SfButton Type="ButtonType.Button" OnClick="@(() => NavigationManager.NavigateTo("/progetti"))">Annulla</SfButton>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Galleria Immagini</h5>
                </div>
                <div class="card-body">
                    @if (isNewProgetto)
                    {
                        <div class="alert alert-info">
                            Salva il progetto prima di aggiungere immagini.
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <SfUploader Multiple="true" AllowedExtensions=".jpg,.jpeg,.png,.gif" 
                                        MaxFileSize="5000000" ShowFileList="true" AutoUpload="true"
                                        @ref="uploader">
                                <UploaderEvents ValueChange="OnFileSelected"></UploaderEvents>
                                <UploaderAsyncSettings SaveUrl="@uploadUrl" RemoveUrl="@removeUrl"></UploaderAsyncSettings>
                            </SfUploader>
                        </div>

                        @if (photos.Any())
                        {
                            <div class="photo-gallery">
                                @foreach (var photo in photos)
                                {
                                    <div class="photo-item">
                                        <div class="photo-preview">
                                            <img src="@photo.LocalPath" alt="@photo.Title" />
                                        </div>
                                        <div class="photo-options">
                                            <SfButton CssClass="e-small" OnClick="() => EditPhotoDetails(photo)">
                                                <i class="fa fa-edit"></i>
                                            </SfButton>
                                            <SfButton CssClass="e-small e-danger" OnClick="() => DeletePhoto(photo)">
                                                <i class="fa fa-trash"></i>
                                            </SfButton>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <p>Nessuna immagine presente.</p>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<SfDialog @bind-Visible="@isPhotoDialogVisible" Width="500px" ShowCloseIcon="true" IsModal="true">
    <DialogTemplates>
        <Header>Dettagli Immagine</Header>
        <Content>
            @if (selectedPhoto != null)
            {
                <div class="form-group mb-3">
                    <label>Titolo</label>
                    <SfTextBox @bind-Value="selectedPhoto.Title"></SfTextBox>
                </div>
                <div class="form-group mb-3">
                    <label>Descrizione</label>
                    <SfTextBox Multiline="true" @bind-Value="selectedPhoto.Description"></SfTextBox>
                </div>
                <div class="form-group mb-3">
                    <div class="form-check">
                        <SfCheckBox @bind-Checked="selectedPhoto.IsAttiva" Label="Immagine attiva"></SfCheckBox>
                    </div>
                </div>
                <div class="form-group">
                    <div class="image-preview mb-3">
                        <img src="@selectedPhoto.LocalPath" alt="@selectedPhoto.Title" style="max-width: 100%; max-height: 200px;" />
                    </div>
                </div>
            }
        </Content>
        <FooterTemplate>
            <SfButton OnClick="@ClosePhotoDialog">Annulla</SfButton>
            <SfButton IsPrimary="true" OnClick="@SavePhotoDetails">Salva</SfButton>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<style>
    .form-buttons {
        display: flex;
        gap: 10px;
    }
    
    .enti-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .ente-item {
        display: flex;
        align-items: center;
        background-color: #f0f0f0;
        border-radius: 4px;
        padding: 4px 8px;
    }
    
    .btn-remove {
        background: none;
        border: none;
        color: #dc3545;
        margin-left: 5px;
        cursor: pointer;
        padding: 0;
        font-size: 14px;
    }
    
    .photo-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        margin-top: 15px;
    }
    
    .photo-item {
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
    }
    
    .photo-preview {
        height: 120px;
        overflow: hidden;
    }
    
    .photo-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .photo-options {
        display: flex;
        justify-content: space-between;
        padding: 5px;
        background-color: #f8f9fa;
    }
</style>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ProgettoUE progetto = new ProgettoUE();
    private List<Foto> photos = new List<Foto>();
    private bool isNewProgetto => Id == Guid.Empty;
    private string pageTitle => isNewProgetto ? "Aggiungi Progetto UE" : "Modifica Progetto UE";
    private bool isSaving;
    private string newEnte = "";
    private List<ToolbarItemModel> tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen }
    };

    private SfUploader? uploader;
    private string uploadUrl => $"/api/foto/upload/{progetto.ID}";
    private string removeUrl => $"/api/foto/remove";
    private bool isPhotoDialogVisible = false;
    private Foto? selectedPhoto = null;

    protected override async Task OnInitializedAsync()
    {
        if (!isNewProgetto)
        {
            await LoadProgetto();
            await LoadPhotos();
        }
        else
        {
            // Inizializza un nuovo progetto con valori di default
            progetto = new ProgettoUE
            {
                ID = Guid.Empty,
                DataInizio = DateTime.Now,
                DataFine = DateTime.Now.AddMonths(12),
                IsAttivo = true,
                EntiCoinvolti = new List<string>()
            };
        }
    }

    private async Task LoadProgetto()
    {
        try
        {
            var loadedProgetto = await ProgettoService.GetProgettoByIdAsync(Id);
            if (loadedProgetto != null)
            {
                progetto = loadedProgetto;
                
                // Assicurati che EntiCoinvolti non sia null
                if (progetto.EntiCoinvolti == null)
                {
                    progetto.EntiCoinvolti = new List<string>();
                }
            }
            else
            {
                await ToastSettings.ShowError("Progetto non trovato.");
                NavigationManager.NavigateTo("/progetti");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore nel caricamento del progetto: {ex.Message}");
            await ToastSettings.ShowError("Errore nel caricamento del progetto.");
            NavigationManager.NavigateTo("/progetti");
        }
    }

    private async Task LoadPhotos()
    {
        try
        {
            photos = await FotoService.GetFotoByEntityAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore nel caricamento delle foto: {ex.Message}");
            await ToastSettings.ShowError("Errore nel caricamento delle immagini.");
        }
    }

    private void AddEnte()
    {
        if (!string.IsNullOrWhiteSpace(newEnte) && !progetto.EntiCoinvolti.Contains(newEnte))
        {
            progetto.EntiCoinvolti.Add(newEnte);
            newEnte = "";
        }
    }

    private void RemoveEnte(string ente)
    {
        progetto.EntiCoinvolti.Remove(ente);
    }

    private async Task SaveProgetto()
    {
        isSaving = true;
        try
        {
            bool success;
            
            if (isNewProgetto)
            {
                progetto.ID = Guid.NewGuid();
                success = await ProgettoService.CreateProgettoAsync(progetto);
                if (success)
                {
                    await ToastSettings.ShowSuccess("Progetto creato con successo.");
                    NavigationManager.NavigateTo($"/progetti/edit/{progetto.ID}");
                }
            }
            else
            {
                success = await ProgettoService.UpdateProgettoAsync(progetto);
                if (success)
                {
                    await ToastSettings.ShowSuccess("Progetto aggiornato con successo.");
                }
            }
            
            if (!success)
            {
                await ToastSettings.ShowError("Errore nel salvataggio del progetto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore nel salvataggio del progetto: {ex.Message}");
            await ToastSettings.ShowError("Errore nel salvataggio del progetto.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void OnFileSelected(UploadChangeEventArgs args)
    {
        // Gestione degli eventi del file uploader
    }

    private void EditPhotoDetails(Foto photo)
    {
        selectedPhoto = new Foto
        {
            ID = photo.ID,
            Title = photo.Title,
            Description = photo.Description,
            LocalPath = photo.LocalPath,
            EntityID = photo.EntityID,
            EntityType = photo.EntityType,
            IsAttiva = photo.IsAttiva,
            Filename = photo.Filename
        };
        
        isPhotoDialogVisible = true;
    }

    private void ClosePhotoDialog()
    {
        isPhotoDialogVisible = false;
        selectedPhoto = null;
    }

    private async Task SavePhotoDetails()
    {
        if (selectedPhoto == null) return;

        try
        {
            var success = await FotoService.UpdateFotoAsync(selectedPhoto);
            
            if (success)
            {
                // Aggiorna la foto nella lista locale
                var photoToUpdate = photos.FirstOrDefault(p => p.ID == selectedPhoto.ID);
                if (photoToUpdate != null)
                {
                    photoToUpdate.Title = selectedPhoto.Title;
                    photoToUpdate.Description = selectedPhoto.Description;
                    photoToUpdate.IsAttiva = selectedPhoto.IsAttiva;
                }
                
                await ToastSettings.ShowSuccess("Dettagli immagine aggiornati con successo.");
            }
            else
            {
                await ToastSettings.ShowError("Errore nell'aggiornamento dei dettagli dell'immagine.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore nell'aggiornamento dei dettagli dell'immagine: {ex.Message}");
            await ToastSettings.ShowError("Errore nell'aggiornamento dei dettagli dell'immagine.");
        }
        finally
        {
            ClosePhotoDialog();
        }
    }

    private async Task DeletePhoto(Foto photo)
    {
        try
        {
            var success = await FotoService.DeleteFotoAsync(photo.ID);
            
            if (success)
            {
                photos.Remove(photo);
                StateHasChanged();
                await ToastSettings.ShowSuccess("Immagine eliminata con successo.");
            }
            else
            {
                await ToastSettings.ShowError("Errore nell'eliminazione dell'immagine.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore nell'eliminazione dell'immagine: {ex.Message}");
            await ToastSettings.ShowError("Errore nell'eliminazione dell'immagine.");
        }
    }
}
