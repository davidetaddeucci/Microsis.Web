@using Microsis.Names.Models
@inject HttpClient Http
@inject NavigationManager Navigation

@if (isLoading)
{
    <div class="row">
        <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento...</span>
            </div>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
            <button class="btn btn-primary mt-3" @onclick="BackToNewsList">
                Torna all'elenco delle news
            </button>
        </div>
    </div>
}
else if (newsItem != null)
{
    <div class="row mb-3">
        <div class="col-12">
            <button class="btn btn-outline-primary mb-4" @onclick="BackToNewsList">
                <i class="fas fa-arrow-left me-2"></i> Torna all'elenco delle news
            </button>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="news-detail-title">@newsItem.Titolo</h1>
            <div class="news-detail-date mb-4">
                Pubblicato il @newsItem.DataPubblicazione.ToString("dd MMMM yyyy")
            </div>
        </div>
    </div>
    
    @if (newsItem.GalleriaFoto != null && newsItem.GalleriaFoto.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="news-detail-image-container">
                    <img src="/api/Foto/@newsItem.GalleriaFoto.First()" class="img-fluid rounded" alt="@newsItem.Titolo" />
                </div>
            </div>
        </div>
    }
    
    <div class="row mb-5">
        <div class="col-12">
            <div class="news-detail-content">
                @{
                    var paragraphs = newsItem.Contenuto.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                    foreach (var paragraph in paragraphs)
                    {
                        <p>@paragraph</p>
                    }
                }
            </div>
        </div>
    </div>
    
    @if (newsItem.GalleriaFoto != null && newsItem.GalleriaFoto.Count > 1)
    {
        <div class="row mb-5">
            <div class="col-12">
                <h3>Galleria fotografica</h3>
                <div class="row g-3 mt-2">
                    @foreach (var photoId in newsItem.GalleriaFoto.Skip(1))
                    {
                        <div class="col-md-4">
                            <div class="photo-gallery-item">
                                <img src="/api/Foto/@photoId" class="img-fluid rounded" alt="Immagine gallery" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-warning" role="alert">
                News non trovata
            </div>
            <button class="btn btn-primary mt-3" @onclick="BackToNewsList">
                Torna all'elenco delle news
            </button>
        </div>
    </div>
}

<style>
    .news-detail-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .news-detail-date {
        font-size: 1rem;
        color: #6c757d;
    }
    
    .news-detail-content {
        font-size: 1.1rem;
        line-height: 1.7;
    }
    
    .news-detail-content p {
        margin-bottom: 1.5rem;
    }
    
    .photo-gallery-item {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }
    
    .photo-gallery-item:hover {
        transform: translateY(-5px);
    }
</style>

@code {
    [Parameter]
    public Guid NewsId { get; set; }
    
    private News? newsItem;
    private bool isLoading = true;
    private string? errorMessage;
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadNewsDetailAsync();
    }
    
    private async Task LoadNewsDetailAsync()
    {
        try
        {
            isLoading = true;
            
            // Fetch news detail from API
            var response = await Http.GetAsync($"https://localhost:7000/api/News/{NewsId}");
            
            if (response.IsSuccessStatusCode)
            {
                newsItem = await response.Content.ReadFromJsonAsync<News>();
            }
            else
            {
                errorMessage = $"Errore API: {response.StatusCode}";
                // Use static fallback data in a real application
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento della news: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void BackToNewsList()
    {
        Navigation.NavigateTo("/news");
    }
}
