@using Microsis.Names.Models
@using Microsis.Web.Public.Services;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LanguageService LanguageService

@if (isLoading)
{
    <div class="row">
        <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">@(LanguageService.IsEnglish ? "Loading..." : "Caricamento...")</span>
            </div>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
            <button class="btn btn-primary mt-3" @onclick="BackToNewsList">
                @(LanguageService.IsEnglish ? "Back to news list" : "Torna all'elenco delle news")
            </button>
        </div>
    </div>
}
else if (newsItem != null)
{
    <div class="row mb-3">
        <div class="col-12">
            <button class="btn btn-outline-primary mb-4" @onclick="BackToNewsList">
                <i class="fas fa-arrow-left me-2"></i> @(LanguageService.IsEnglish ? "Back to news list" : "Torna all'elenco delle news")
            </button>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="news-detail-title">
                @(LanguageService.IsEnglish && !string.IsNullOrEmpty(newsItem.Titolo_EN) ? newsItem.Titolo_EN : newsItem.Titolo)
            </h1>
            <div class="news-detail-date mb-4">
                @(LanguageService.IsEnglish ? "Published on " : "Pubblicato il ") 
                @newsItem.DataPubblicazione.ToString("dd MMMM yyyy")
            </div>
        </div>
    </div>
    
    @if (newsItem.GalleriaFoto != null && newsItem.GalleriaFoto.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="news-detail-image-container">
                    <img src="/api/Foto/@newsItem.GalleriaFoto.First()" class="img-fluid rounded" alt="@(LanguageService.IsEnglish && !string.IsNullOrEmpty(newsItem.Titolo_EN) ? newsItem.Titolo_EN : newsItem.Titolo)" />
                </div>
            </div>
        </div>
    }
    
    <div class="row mb-5">
        <div class="col-12">
            <div class="news-detail-content">
                @{
                    var content = LanguageService.IsEnglish && !string.IsNullOrEmpty(newsItem.Contenuto_EN) 
                        ? newsItem.Contenuto_EN 
                        : newsItem.Contenuto;
                    
                    var paragraphs = content.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                    foreach (var paragraph in paragraphs)
                    {
                        <p>@paragraph</p>
                    }
                }
            </div>
        </div>
    </div>
    
    @if (newsItem.GalleriaFoto != null && newsItem.GalleriaFoto.Count > 1)
    {
        <div class="row mb-5">
            <div class="col-12">
                <h3>@(LanguageService.IsEnglish ? "Photo Gallery" : "Galleria fotografica")</h3>
                <div class="row g-3 mt-2">
                    @foreach (var photoId in newsItem.GalleriaFoto.Skip(1))
                    {
                        <div class="col-md-4">
                            <div class="photo-gallery-item">
                                <img src="/api/Foto/@photoId" class="img-fluid rounded" alt="@(LanguageService.IsEnglish ? "Gallery image" : "Immagine gallery")" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-warning" role="alert">
                @(LanguageService.IsEnglish ? "News not found" : "News non trovata")
            </div>
            <button class="btn btn-primary mt-3" @onclick="BackToNewsList">
                @(LanguageService.IsEnglish ? "Back to news list" : "Torna all'elenco delle news")
            </button>
        </div>
    </div>
}

<style>
    .news-detail-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .news-detail-date {
        font-size: 1rem;
        color: #6c757d;
    }
    
    .news-detail-content {
        font-size: 1.1rem;
        line-height: 1.7;
    }
    
    .news-detail-content p {
        margin-bottom: 1.5rem;
    }
    
    .photo-gallery-item {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }
    
    .photo-gallery-item:hover {
        transform: translateY(-5px);
    }
</style>

@code {
    [Parameter]
    public Guid NewsId { get; set; }
    
    private News? newsItem;
    private bool isLoading = true;
    private string? errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to language change events
        LanguageService.OnLanguageChanged += HandleLanguageChanged;
        
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadNewsDetailAsync();
    }
    
    private async Task LoadNewsDetailAsync()
    {
        try
        {
            isLoading = true;
            
            // Fetch news detail from API with language parameter
            var url = $"https://localhost:7000/api/News/{NewsId}";
            if (LanguageService.IsEnglish)
            {
                url += "?englishTranslation=true";
            }
            
            var response = await Http.GetAsync(url);
            
            if (response.IsSuccessStatusCode)
            {
                newsItem = await response.Content.ReadFromJsonAsync<News>();
            }
            else
            {
                errorMessage = LanguageService.IsEnglish
                    ? $"API Error: {response.StatusCode}"
                    : $"Errore API: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = LanguageService.IsEnglish
                ? $"Error loading news: {ex.Message}"
                : $"Errore durante il caricamento della news: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void BackToNewsList()
    {
        Navigation.NavigateTo("/news");
    }
    
    private void HandleLanguageChanged()
    {
        // Refresh the component when language changes
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        LanguageService.OnLanguageChanged -= HandleLanguageChanged;
    }
}
