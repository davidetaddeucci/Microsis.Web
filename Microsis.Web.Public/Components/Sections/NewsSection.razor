@using Syncfusion.Blazor.Buttons
@using Microsis.Names.Models
@using Microsis.Web.Public.Services
@inject NavigationManager NavigationManager
@inject INewsPublicService NewsService
@inject HttpClient Http

<section class="content content--border">
    <div class="container">
        <h2 class="section-title">Outlook</h2>

        @if (isLoading)
        {
            <div class="row">
                <div class="col-12 text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var news in newsItems)
                {
                    <div class="col-md-4">
                        <div class="news-item">
                            <div class="news-date">@news.DataPubblicazione.ToString("dd MMMM yyyy")</div>
                            <h3 class="news-title">@news.Titolo</h3>
                            <p class="news-excerpt">@(news.Descrizione ?? GetExcerpt(news.Contenuto, 120))</p>
                            <SfButton CssClass="btn btn-sm btn-primary" OnClick="@(() => NavigateToNewsDetail(news.ID))">
                                Leggi di più
                            </SfButton>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

@code {
    private List<News> newsItems = new List<News>();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            newsItems = await FetchNewsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante il caricamento delle news: {ex.Message}";
            Console.WriteLine(ex);

            // In caso di errore, usa i dati statici come fallback
            newsItems = GetStaticNews();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<News>> FetchNewsAsync()
    {
        try
        {
            // Configurazione del client HTTP
            var response = await NewsService.GetLatestAsync(3);
            if (response != null && response.Count()>0)
            {
                var news = response.ToList();
                // Ordina le news per data di pubblicazione (dalla più recente)
                return news;
            }
            else
            {
               // errorMessage = $"Errore API: {response.StatusCode}";
                return GetStaticNews();
            }
        }
        catch(Exception ecc)
        {
            // Se c'è un errore di connessione, prova con JavaScript Fetch
            return await FetchNewsWithJavaScriptAsync() ?? GetStaticNews();
        }
    }
    
    private async Task<List<News>?> FetchNewsWithJavaScriptAsync()
    {
        try
        {
            // Implementa chiamata JavaScript quando necessario
            return null;
        }
        catch
        {
            return null;
        }
    }
    
    // Dati statici di fallback nel caso l'API non sia disponibile
    private List<News> GetStaticNews()
    {
        return new List<News>
        {
            new News
            {
                ID = Guid.NewGuid(),
                Titolo = "Microsis partner nel progetto H2TRAIN di Horizon 2020",
                Contenuto = "Siamo orgogliosi di annunciare la nostra partecipazione come partner nel progetto 2TRAIN - The Future of Health Monitoring, finanziato dall'Unione Europea nell'ambito del programma Horizon 2020 Research & Innovation.",
                Descrizione = "Microsis partner ufficiale del progetto 2TRAIN di Horizon 2020 per il monitoraggio sanitario avanzato",
                DataPubblicazione = DateTime.Now.AddDays(-30),
                Visible = true
            },
            new News
            {
                ID = Guid.NewGuid(),
                Titolo = "Avviato il sistema di monitoraggio per scompenso cardiaco MHCD",
                Contenuto = "Microsis annuncia l'avvio ufficiale del progetto MHCD, un sistema innovativo per il monitoraggio dei pazienti affetti da scompenso cardiaco, sviluppato con il cofinanziamento dell'Unione Europea e della Regione Lazio.",
                Descrizione = "Avviato il sistema MHCD per il monitoraggio dei pazienti con scompenso cardiaco",
                DataPubblicazione = DateTime.Now.AddDays(-15),
                Visible = true
            },
            new News
            {
                ID = Guid.NewGuid(),
                Titolo = "Microsis e Università La Sapienza insieme per il progetto FTE0000516",
                Contenuto = "Microsis e il Dipartimento SCIAC dell'Università La Sapienza di Roma hanno ufficialmente avviato la collaborazione per il progetto FTE0000516, mirato allo sviluppo di un sistema per l'individuazione di Marker Cardiaci Prognostici.",
                Descrizione = "Avviata collaborazione con Università La Sapienza per lo sviluppo di Marker Cardiaci Prognostici",
                DataPubblicazione = DateTime.Now.AddDays(-7),
                Visible = true
            }
        };
    }

    private void NavigateToNewsDetail(Guid id)
    {
        NavigationManager.NavigateTo($"/news/{id}");
    }

    private string GetExcerpt(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;

        var excerpt = text.Substring(0, maxLength);
        return excerpt.Substring(0, excerpt.LastIndexOf(' ')) + "...";
    }
}
